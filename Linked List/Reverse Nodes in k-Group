Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int size=0;
        ListNode c=head;
        while(c!=null)
        {
            c=c.next;
            size++;
        }
        
        ListNode ans=null;
        ListNode current=head;
        ListNode first=null;
        ListNode last=null;
        ListNode prev=null;
        ListNode lastNode=null;
        int i=0;
        
        int j=0;
        while(current!=null)
        {
            if(size-j>=k)
            {
        i=0;
        prev=null;
        ListNode root=current;
          
        while(i<k && current!=null)
        {
            
            ListNode n=current.next;
            current.next=prev;
            prev=current;
            current=n;
            i++;
            j++;
        }    
           
            if(ans==null)
            {
                ans=prev;
            }
            
            if(lastNode!=null)
            {
                lastNode.next=prev;
            }
            last=root;
            first=prev;
            lastNode=root;
            }
            else
            {
                if(lastNode==null)
                {
                    ans=current;
                }
                lastNode.next=current;
                break;
            }
            
        }
        return ans;
    }
}

Time Complexity -O(n)
Space Complexity- O(n)
